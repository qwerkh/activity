{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/snr/Desktop/Project/activity/imports/vue/ui/accClosingEntry.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/snr/Desktop/Project/activity/imports/vue/ui/accClosingEntry.vue","filename":"/home/snr/Desktop/Project/activity/imports/vue/ui/accClosingEntry.vue","passPerPreset":false,"envName":"development","cwd":"/home/snr/Desktop/Project/activity","root":"/home/snr/Desktop/Project/activity","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/snr/Desktop/Project/activity/imports/vue/ui/accClosingEntry.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/snr/Desktop/Project/activity/imports/vue/ui/accClosingEntry.vue"}},"code":"var Acc_ClosingEntryReact;\nmodule.link(\"../../collection/accClosingEntry\", {\n  Acc_ClosingEntryReact: function (v) {\n    Acc_ClosingEntryReact = v;\n  }\n}, 0);\nmodule.exportDefault({\n  data: function () {\n    return {\n      newLoading: true,\n      closingEntryData: [],\n      journalClosingEntry: [],\n      exchangeOptions: [],\n      loading: false,\n      searchData: '',\n      isSearching: false,\n      currentPage: 1,\n      currentSize: 10,\n      count: 0,\n      dialogAddClosingEntry: false,\n      dialogUpdateClosingEntry: false,\n      closingEntryForm: {\n        closeDate: moment().toDate(),\n        exchangeId: \"\",\n        _id: \"\"\n      },\n      rules: {\n        closeDate: [{\n          type: 'date',\n          required: true,\n          message: 'Please input Journal Date',\n          trigger: 'blur'\n        }],\n        exchangeId: [{\n          required: true,\n          message: 'Please input Exchange',\n          trigger: 'blur'\n        }]\n      },\n      options: {\n        disabledDate: function (time) {\n          return false;\n        }\n      },\n      disabledDate: false,\n      closeDate: \"\",\n      skip: 0\n    };\n  },\n  watch: {\n    currentSize: function (val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * val;\n      this.queryData(this.searchData, this.skip, val + this.skip);\n    },\n    currentPage: function (val) {\n      this.isSearching = true;\n      this.skip = (val - 1) * this.currentSize;\n      this.queryData(this.searchData, this.skip, this.currentSize + this.skip);\n    },\n    searchData: function (val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * this.currentSize;\n      this.queryData(val, this.skip, this.currentSize + this.skip);\n    },\n    \"closingEntryForm.closeDate\": function (val) {\n      var vm = this;\n\n      if (vm.closeDate && vm.closeDate != \"\" && vm.closeDate != undefined) {\n        vm.options = {\n          disabledDate: function (time) {\n            var min = moment(vm.closeDate).add(1, \"days\").toDate().getTime();\n            return time.getTime() < min;\n          }\n        };\n      } else {\n        vm.options = {\n          disabledDate: function (time) {\n            return false;\n          }\n        };\n      }\n    }\n  },\n  mounted: function () {\n    this.$jQuery('body').off();\n    var vm = this;\n    vm.options = {\n      disabledDate: function (time) {\n        var min = moment(vm.closeDate).add(1, \"days\").toDate().getTime();\n        return time.getTime() < min;\n      }\n    };\n  },\n  methods: {\n    handleSizeChange: function (val) {\n      this.currentSize = val;\n    },\n    handleCurrentChange: function (val) {\n      this.currentPage = val;\n    },\n    queryData: _.debounce(function (val, skip, limit) {\n      var _this = this;\n\n      this.newLoading = true;\n      Meteor.call('queryClosingEntry', {\n        q: val,\n        filter: this.filter,\n        rolesArea: Session.get('area'),\n        options: {\n          skip: skip || 0,\n          limit: limit || 10\n        }\n      }, function (err, result) {\n        if (!err) {\n          _this.closingEntryData = result.content;\n          _this.count = result.countClosingEntry;\n        }\n\n        _this.isSearching = false;\n        _this.newLoading = false;\n      });\n    }, 300),\n    reportCurrencyClosing: function (data) {\n      var params = {};\n      var queryParams = {};\n      queryParams._id = data._id;\n      queryParams.area = Session.get(\"area\");\n      var path = FlowRouter.path(\"acc.currencyClosingReport\", params, queryParams);\n      window.open(path, \"_blank\");\n    },\n    fetchExchange: function () {\n      var _this2 = this;\n\n      Meteor.call('queryExchangeOptionReport', function (err, result) {\n        if (result) {\n          _this2.exchangeOptions = result;\n        }\n      });\n    },\n    popUpAdd: function () {\n      var vm = this;\n      Meteor.call(\"queryLastClosingEntry\", Session.get(\"area\"), function (err, re) {\n        if (re != undefined) {\n          vm.closeDate = re.closeDate;\n        } else {\n          vm.closeDate = \"\";\n        }\n      });\n    },\n    saveClosingEntry: function (event) {\n      event.preventDefault();\n      var vm = this;\n      this.$refs[\"closingEntryForm\"].validate(function (valid) {\n        if (valid) {\n          var closingEntryDoc = {\n            closeDate: vm.closingEntryForm.closeDate,\n            rolesArea: Session.get('area'),\n            month: moment(vm.closingEntryForm.closeDate).format(\"MM\"),\n            year: moment(vm.closingEntryForm.closeDate).format(\"YYYY\"),\n            closeDateName: moment(vm.closingEntryForm.closeDate).format(\"DD/MM/YYYY\"),\n            exchangeId: vm.closingEntryForm.exchangeId\n          };\n          Meteor.call(\"queryClosingEntryByMonthYear\", closingEntryDoc.month, closingEntryDoc.year, Session.get('area'), function (err, re) {\n            if (re == undefined) {\n              Meteor.call(\"insertClosingEntry\", closingEntryDoc, function (err, result) {\n                if (!err) {\n                  vm.$message({\n                    duration: 1000,\n                    message: \"Save Successfully!\",\n                    type: 'success'\n                  });\n                  vm.dialogAddClosingEntry = false;\n                  vm.$refs[\"closingEntryForm\"].resetFields();\n                  vm.resetForm();\n                } else {\n                  vm.$message({\n                    duration: 1000,\n                    message: \"Duplicate Date!!\",\n                    type: 'error'\n                  });\n                }\n              });\n            } else {\n              vm.$message({\n                duration: 1000,\n                message: \"Duplicate Date!!\",\n                type: 'error'\n              });\n            }\n          });\n        }\n      });\n    },\n    updateClosingEntry: function () {\n      var vm = this;\n      var closingEntryDoc = {\n        _id: vm.closingEntryForm._id,\n        closeDate: vm.closingEntryForm.closeDate,\n        rolesArea: Session.get('area'),\n        month: moment(vm.closingEntryForm.closeDate).format(\"MM\"),\n        year: moment(vm.closingEntryForm.closeDate).format(\"YYYY\"),\n        closeDateName: moment(this.closingEntryForm.closeDate).format(\"DD/MM/YYYY\")\n      };\n      Meteor.call(\"queryClosingEntryByMonthYear\", closingEntryDoc.month, closingEntryDoc.year, Session.get('area'), function (err, re) {\n        if (re == undefined) {\n          Meteor.call(\"updateClosingEntry\", closingEntryDoc, function (err, result) {\n            if (!err) {\n              vm.$message({\n                duration: 1000,\n                message: \"Update Successfully!\",\n                type: 'success'\n              });\n              vm.dialogUpdateClosingEntry = false;\n              vm.$refs[\"closingEntryForm\"].resetFields();\n              vm.resetForm();\n            } else {\n              vm.$message({\n                duration: 1000,\n                message: \"Update Failed!\",\n                type: 'error'\n              });\n            }\n          });\n        } else {\n          vm.$message({\n            duration: 1000,\n            message: \"Duplicate Date!!\",\n            type: 'error'\n          });\n        }\n      });\n    },\n    removeClosingEntry: function (index, row, rows) {\n      var vm = this;\n      Meteor.call(\"queryLastClosingEntry\", Session.get(\"area\"), function (err, re) {\n        if (re.month == row.month && re.year == row.year) {\n          vm.$confirm('This will permanently delete the Item. Continue?', 'Warning', {\n            confirmButtonText: 'OK',\n            cancelButtonText: 'Cancel',\n            type: 'warning'\n          }).then(function () {\n            Meteor.call(\"removeClosingEntry\", row._id, function (err, result) {\n              if (!err) {\n                rows.splice(index, 1);\n                vm.$message({\n                  message: \"\\u179B\\u17BB\\u1794 \" + row.closeDateName + \" \\u1794\\u17B6\\u1793\\u1787\\u17C4\\u1782\\u1787\\u17D0\\u1799\",\n                  type: 'success'\n                });\n              } else {\n                vm.$message({\n                  type: 'error',\n                  message: 'Delete Failed'\n                });\n              }\n            });\n          }).catch(function () {\n            vm.$message({\n              type: 'info',\n              message: 'Delete canceled'\n            });\n          });\n        } else {\n          vm.$message({\n            type: 'error',\n            message: 'Delete Failed ! Not Last Date!'\n          });\n        }\n      });\n    },\n    findClosingEntryById: function (doc) {\n      var _this3 = this;\n\n      Meteor.call(\"queryClosingEntryById\", doc.row._id, function (err, result) {\n        if (result) {\n          _this3.closingEntryForm = result;\n        }\n      });\n    },\n    cancel: function () {\n      this.$message({\n        type: 'info',\n        message: 'Canceled'\n      });\n    },\n    resetForm: function () {\n      if (this.$refs[\"closingEntryForm\"]) {\n        this.$refs[\"closingEntryForm\"].resetFields();\n      }\n    }\n  },\n  created: function () {\n    this.isSearching = true;\n    this.queryData();\n    this.fetchExchange();\n    Meteor.subscribe('Acc_ClosingEntryReact');\n  },\n  meteor: {\n    newRe: function () {\n      var vm = this;\n      Acc_ClosingEntryReact.find({}).fetch();\n      vm.queryData(vm.searchData, vm.skip, vm.currentSize + vm.skip);\n    }\n  }\n});","map":{"version":3,"sources":["/home/snr/Desktop/Project/activity/imports/vue/ui/accClosingEntry.vue"],"names":["Acc_ClosingEntryReact","module","link","v","exportDefault","data","newLoading","closingEntryData","journalClosingEntry","exchangeOptions","loading","searchData","isSearching","currentPage","currentSize","count","dialogAddClosingEntry","dialogUpdateClosingEntry","closingEntryForm","closeDate","moment","toDate","exchangeId","_id","rules","type","required","message","trigger","options","disabledDate","time","skip","watch","val","queryData","vm","undefined","min","add","getTime","mounted","$jQuery","off","methods","handleSizeChange","handleCurrentChange","_","debounce","limit","Meteor","call","q","filter","rolesArea","Session","get","err","result","content","countClosingEntry","reportCurrencyClosing","params","queryParams","area","path","FlowRouter","window","open","fetchExchange","popUpAdd","re","saveClosingEntry","event","preventDefault","$refs","validate","valid","closingEntryDoc","month","format","year","closeDateName","$message","duration","resetFields","resetForm","updateClosingEntry","removeClosingEntry","index","row","rows","$confirm","confirmButtonText","cancelButtonText","then","splice","catch","findClosingEntryById","doc","cancel","created","subscribe","meteor","newRe","find","fetch"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {Acc_ClosingEntryReact} from \"../../collection/accClosingEntry\";\n\nexport default {\n    data() {\n        return {\n            newLoading: true,\n            closingEntryData: [],\n            journalClosingEntry: [],\n            exchangeOptions: [],\n            loading: false,\n            searchData: '',\n            isSearching: false,\n            currentPage: 1,\n            currentSize: 10,\n            count: 0,\n            dialogAddClosingEntry: false,\n            dialogUpdateClosingEntry: false,\n            closingEntryForm: {\n                closeDate: moment().toDate(),\n                exchangeId: \"\",\n                _id: \"\"\n            },\n            rules: {\n                closeDate: [{\n                    type: 'date',\n                    required: true,\n                    message: 'Please input Journal Date',\n                    trigger: 'blur'\n                }],\n                exchangeId: [{required: true, message: 'Please input Exchange', trigger: 'blur'}]\n\n\n            },\n            options: {\n                disabledDate(time) {\n                    return false;\n                }\n            },\n            disabledDate: false,\n            closeDate: \"\",\n            skip: 0\n        }\n    },\n    watch: {\n        currentSize(val) {\n            this.isSearching = true;\n            this.skip = (this.currentPage - 1) * val;\n            this.queryData(this.searchData, this.skip, val + this.skip);\n        },\n        currentPage(val) {\n            this.isSearching = true;\n            this.skip = (val - 1) * this.currentSize;\n            this.queryData(this.searchData, this.skip, this.currentSize + this.skip);\n        },\n        searchData(val) {\n            this.isSearching = true;\n            this.skip = (this.currentPage - 1) * this.currentSize;\n            this.queryData(val, this.skip, this.currentSize + this.skip);\n        },\n        \"closingEntryForm.closeDate\"(val) {\n            let vm = this;\n            if (vm.closeDate && vm.closeDate != \"\" && vm.closeDate != undefined) {\n                vm.options = {\n                    disabledDate(time) {\n                        let min = moment(vm.closeDate).add(1, \"days\").toDate().getTime();\n                        return time.getTime() < min;\n                    }\n                }\n            } else {\n                vm.options = {\n                    disabledDate(time) {\n                        return false;\n                    }\n                }\n            }\n        }\n    },\n    mounted() {\n        this.$jQuery('body').off();\n        let vm = this;\n        vm.options = {\n            disabledDate(time) {\n                let min = moment(vm.closeDate).add(1, \"days\").toDate().getTime();\n                return time.getTime() < min;\n            }\n        }\n    },\n    methods: {\n        handleSizeChange(val) {\n            this.currentSize = val;\n        },\n        handleCurrentChange(val) {\n            this.currentPage = val;\n        },\n        queryData: _.debounce(function (val, skip, limit) {\n            this.newLoading = true;\n            Meteor.call('queryClosingEntry', {\n                q: val,\n                filter: this.filter,\n                rolesArea:Session.get('area'),\n                options: {skip: skip || 0, limit: limit || 10}\n            }, (err, result) => {\n                if (!err) {\n                    this.closingEntryData = result.content;\n                    this.count = result.countClosingEntry;\n                }\n                this.isSearching = false;\n                this.newLoading = false;\n            });\n        }, 300),\n\n        reportCurrencyClosing(data) {\n            let params = {};\n            let queryParams = {};\n            queryParams._id = data._id;\n            queryParams.area = Session.get(\"area\");\n            let path = FlowRouter.path(\"acc.currencyClosingReport\", params, queryParams);\n            window.open(path, \"_blank\");\n        },\n\n        fetchExchange() {\n            Meteor.call('queryExchangeOptionReport', (err, result) => {\n                if (result) {\n                    this.exchangeOptions = result;\n                }\n            });\n        },\n        popUpAdd() {\n            let vm = this;\n            Meteor.call(\"queryLastClosingEntry\", Session.get(\"area\"), function (err, re) {\n                if (re != undefined) {\n                    vm.closeDate = re.closeDate;\n                } else {\n                    vm.closeDate = \"\";\n                }\n            })\n        },\n        saveClosingEntry(event) {\n            event.preventDefault();\n\n            let vm = this;\n            this.$refs[\"closingEntryForm\"].validate((valid) => {\n                if (valid) {\n                    let closingEntryDoc = {\n                        closeDate: vm.closingEntryForm.closeDate,\n                        rolesArea: Session.get('area'),\n                        month: moment(vm.closingEntryForm.closeDate).format(\"MM\"),\n                        year: moment(vm.closingEntryForm.closeDate).format(\"YYYY\"),\n                        closeDateName: moment(vm.closingEntryForm.closeDate).format(\"DD/MM/YYYY\"),\n                        exchangeId: vm.closingEntryForm.exchangeId\n                    };\n\n                    Meteor.call(\"queryClosingEntryByMonthYear\", closingEntryDoc.month, closingEntryDoc.year, Session.get('area'), function (err, re) {\n                        if (re == undefined) {\n                            Meteor.call(\"insertClosingEntry\", closingEntryDoc, (err, result) => {\n                                if (!err) {\n                                    vm.$message({\n                                        duration: 1000,\n                                        message: `Save Successfully!`,\n                                        type: 'success'\n                                    });\n                                    vm.dialogAddClosingEntry = false;\n                                    vm.$refs[\"closingEntryForm\"].resetFields();\n                                    vm.resetForm();\n\n                                } else {\n                                    vm.$message({\n                                        duration: 1000,\n                                        message: `Duplicate Date!!`,\n                                        type: 'error'\n                                    });\n                                }\n                            })\n                        } else {\n                            vm.$message({\n                                duration: 1000,\n                                message: `Duplicate Date!!`,\n                                type: 'error'\n                            });\n                        }\n                    })\n\n                }\n            })\n\n        },\n        updateClosingEntry() {\n            let vm = this;\n            let closingEntryDoc = {\n                _id: vm.closingEntryForm._id,\n                closeDate: vm.closingEntryForm.closeDate,\n                rolesArea: Session.get('area'),\n                month: moment(vm.closingEntryForm.closeDate).format(\"MM\"),\n                year: moment(vm.closingEntryForm.closeDate).format(\"YYYY\"),\n                closeDateName: moment(this.closingEntryForm.closeDate).format(\"DD/MM/YYYY\")\n\n            };\n            Meteor.call(\"queryClosingEntryByMonthYear\", closingEntryDoc.month, closingEntryDoc.year, Session.get('area'), function (err, re) {\n                if (re == undefined) {\n                    Meteor.call(\"updateClosingEntry\", closingEntryDoc, (err, result) => {\n                        if (!err) {\n                            vm.$message({\n                                duration: 1000,\n                                message: `Update Successfully!`,\n                                type: 'success'\n                            });\n                            vm.dialogUpdateClosingEntry = false;\n                            vm.$refs[\"closingEntryForm\"].resetFields();\n                            vm.resetForm();\n\n                        } else {\n                            vm.$message({\n                                duration: 1000,\n                                message: `Update Failed!`,\n                                type: 'error'\n                            });\n                        }\n                    })\n                } else {\n                    vm.$message({\n                        duration: 1000,\n                        message: `Duplicate Date!!`,\n                        type: 'error'\n                    });\n                }\n            })\n\n        },\n        removeClosingEntry(index, row, rows) {\n            let vm = this;\n            Meteor.call(\"queryLastClosingEntry\", Session.get(\"area\"), function (err, re) {\n                if (re.month == row.month && re.year == row.year) {\n                    vm.$confirm('This will permanently delete the Item. Continue?', 'Warning', {\n                        confirmButtonText: 'OK',\n                        cancelButtonText: 'Cancel',\n                        type: 'warning'\n                    }).then(() => {\n                        Meteor.call(\"removeClosingEntry\", row._id, (err, result) => {\n                            if (!err) {\n                                rows.splice(index, 1);\n\n                                vm.$message({\n                                    message: `លុប ${row.closeDateName} បានជោគជ័យ`,\n                                    type: 'success'\n                                });\n                            } else {\n                                vm.$message({\n                                    type: 'error',\n                                    message: 'Delete Failed'\n                                });\n                            }\n\n                        })\n\n                    }).catch(() => {\n                        vm.$message({\n                            type: 'info',\n                            message: 'Delete canceled'\n                        });\n                    });\n                } else {\n                    vm.$message({\n                        type: 'error',\n                        message: 'Delete Failed ! Not Last Date!'\n                    });\n                }\n            })\n\n\n        },\n        findClosingEntryById(doc) {\n            Meteor.call(\"queryClosingEntryById\", doc.row._id, (err, result) => {\n                if (result) {\n                    this.closingEntryForm = result;\n                }\n            })\n        },\n\n        cancel() {\n            this.$message({\n                type: 'info',\n                message: 'Canceled'\n            });\n        },\n        resetForm() {\n            if (this.$refs[\"closingEntryForm\"]) {\n                this.$refs[\"closingEntryForm\"].resetFields();\n            }\n        }\n    },\n    created() {\n        this.isSearching = true;\n        this.queryData();\n        this.fetchExchange();\n        Meteor.subscribe('Acc_ClosingEntryReact');\n\n    },\n    meteor: {\n        newRe() {\n            let vm = this;\n            Acc_ClosingEntryReact.find({}).fetch();\n            vm.queryData(vm.searchData, vm.skip, vm.currentSize + vm.skip);\n        }\n    }\n}\n"]},"sourceType":"script","hash":"f285e3ddade32f8c84c1b9f64bdbc5827937547b"}
