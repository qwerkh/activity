{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/snr/Desktop/Project/activity/imports/vue/ui/posCategory.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/snr/Desktop/Project/activity/imports/vue/ui/posCategory.vue","filename":"/home/snr/Desktop/Project/activity/imports/vue/ui/posCategory.vue","passPerPreset":false,"envName":"development","cwd":"/home/snr/Desktop/Project/activity","root":"/home/snr/Desktop/Project/activity","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/snr/Desktop/Project/activity/imports/vue/ui/posCategory.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/snr/Desktop/Project/activity/imports/vue/ui/posCategory.vue"}},"code":"var compoLang;\nmodule.link(\"../../../both/i18n/lang/elem-label\", {\n  \"default\": function (v) {\n    compoLang = v;\n  }\n}, 0);\nvar Pos_CategoryReact;\nmodule.link(\"../../collection/posCategory\", {\n  Pos_CategoryReact: function (v) {\n    Pos_CategoryReact = v;\n  }\n}, 1);\nvar Images;\nmodule.link(\"../../collection/fileImages\", {\n  Images: function (v) {\n    Images = v;\n  }\n}, 2);\nvar Manage_Module;\nmodule.link(\"../../collection/manageModule\", {\n  Manage_Module: function (v) {\n    Manage_Module = v;\n  }\n}, 3);\nmodule.exportDefault({\n  meteor: {\n    langSession: function () {\n      return Session.get('lang') || \"en\";\n    },\n    disabledRemove: function () {\n      return Session.get(\"canRemove\");\n    },\n    disabledUpdate: function () {\n      return Session.get(\"canUpdate\");\n    },\n    newRe: function () {\n      var vm = this;\n      Pos_CategoryReact.find({}).fetch();\n      vm.queryData(vm.searchData, vm.skip, vm.currentSize + vm.skip);\n    },\n    isCoffee: function () {\n      var ma = Manage_Module.findOne();\n\n      if (ma && ma.feature) {\n        return ma.feature.indexOf(\"Coffee\") > -1 ? true : false;\n      }\n\n      return false;\n    }\n  },\n  mounted: function () {\n    this.$jQuery('body').off();\n  },\n  data: function () {\n    return {\n      newLoading: true,\n      dialogImageUrl: \"\",\n      dialogVisible: false,\n      posCategoryData: [],\n      loading: false,\n      isloadingImage: false,\n      searchData: '',\n      isSearching: false,\n      currentPage: 1,\n      currentSize: 10,\n      count: 0,\n      dialogAddPosCategory: false,\n      dialogUpdatePosCategory: false,\n      posCategoryForm: {\n        name: \"\",\n        khName: \"\",\n        code: \"\",\n        subCategoryOf: \"\",\n        description: \"\",\n        _id: \"\"\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: 'Please input name',\n          trigger: 'blur'\n        }],\n        code: [{\n          required: true,\n          message: 'Please input code',\n          trigger: 'blur'\n        }]\n      },\n      // Options\n      subCategoryDataOption: [],\n      skip: 0,\n      thumbImgCroppa: null,\n      imgUrl: \"\",\n      imgUrlUpdate: \"\"\n    };\n  },\n  watch: {\n    currentSize: function (val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * val;\n      this.queryData(this.searchData, this.skip, val + this.skip);\n    },\n    currentPage: function (val) {\n      this.isSearching = true;\n      this.skip = (val - 1) * this.currentSize;\n      this.queryData(this.searchData, this.skip, this.currentSize + this.skip);\n    },\n    searchData: function (val) {\n      this.isSearching = true;\n      this.skip = (this.currentPage - 1) * this.currentSize;\n      this.queryData(val, this.skip, this.currentSize + this.skip);\n    },\n    'thumbImgCroppa.loading': function (val) {\n      if (!val) {\n        this.generateThumbImgUrl();\n      }\n    }\n  },\n  methods: {\n    handleSizeChange: function (val) {\n      this.currentSize = val;\n    },\n    handleCurrentChange: function (val) {\n      this.currentPage = val;\n    },\n    queryData: _.debounce(function (val, skip, limit) {\n      var _this = this;\n\n      this.newLoading = true;\n      Meteor.call('queryPosCategory', {\n        q: val,\n        filter: this.filter,\n        options: {\n          skip: skip || 0,\n          limit: limit || 10\n        }\n      }, function (err, result) {\n        if (!err) {\n          _this.posCategoryData = result.content;\n          _this.count = result.countPosCategory;\n        }\n\n        _this.isSearching = false;\n        _this.newLoading = false;\n      });\n    }, 300),\n    parentPosCategoryOption: function () {\n      var _this2 = this;\n\n      var selector = {};\n      Meteor.call('queryParentPosCategoryOption', selector, this.posCategoryForm._id, function (err, result) {\n        _this2.subCategoryDataOption = result;\n      });\n    },\n    savePosCategory: function (event) {\n      event.preventDefault();\n      var vm = this;\n      this.$refs[\"posCategoryFormAdd\"].validate(function (valid) {\n        if (valid) {\n          var imageId = \"\";\n          var imagePath = \"\";\n\n          if (vm.thumbImgCroppa && vm.thumbImgCroppa.hasImage() && vm.imgUrl) {\n            var upload = Images.insert({\n              file: vm.imgUrl,\n              streams: 'dynamic',\n              chunkSize: 'dynamic'\n            }, false);\n            upload.on('start', function (error, result) {\n              if (error) {\n                console.log(error.message);\n              }\n            });\n            upload.on('end', function (error, fileObj) {\n              if (error) {\n                console.log(error.message);\n              } else {\n                imageId = fileObj._id;\n                imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n                var posCategoryDoc = {\n                  code: vm.posCategoryForm.code,\n                  name: vm.posCategoryForm.name,\n                  khName: vm.posCategoryForm.khName,\n                  subCategoryOf: vm.posCategoryForm.subCategoryOf,\n                  description: vm.posCategoryForm.description,\n                  imageId: imageId,\n                  imagePath: imagePath\n                };\n                Meteor.call(\"insertPosCategory\", posCategoryDoc, function (err, result) {\n                  if (!err) {\n                    vm.$message({\n                      duration: 1000,\n                      message: \"Save Successfully!\",\n                      type: 'success'\n                    });\n                    vm.dialogAddPosCategory = false;\n                    vm.parentPosCategoryOption();\n                    vm.$refs[\"posCategoryFormAdd\"].resetFields();\n                    /*if (vm.imgUrl) {\n                        const storageRef = storagePath.fileImage(fileImage, Meteor.userId(), result, \"category\");\n                        let uploadTask = storageRef\n                            .child(\"fileImage\")\n                            .putString(vm.imgUrl, \"data_url\");\n                        uploadTask.on(\n                            \"state_changed\",\n                            function (snapshot) {\n                                // Observe state change events such as progress, pause, and resume\n                                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                                let progress =\n                                    snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                                console.log(\"Upload is \" + progress + \"% done\");\n                                switch (snapshot.state) {\n                                    case firebase.storageState.PAUSED: // or 'paused'\n                                        console.log(\"Upload is paused\");\n                                        break;\n                                    case firebase.storageState.RUNNING: // or 'running'\n                                        console.log(\"Upload is running \" + progress);\n                                        break;\n                                }\n                            },\n                            function (error) {\n                                /!*setTimeout(() => {\n                                    loading.close();\n                                }, 1000)*!/\n                            },\n                            function () {\n                                uploadTask.snapshot.ref.getDownloadURL()\n                                    .then(url => {\n                                        console.log(url);\n                                        /!*Meteor.call('sch_updateStudentImageURlById', result, url, (err, re) => {\n                                            if (err) {\n                                                console.log(err.message);\n                                            } else {\n                                                vm.thumbImgCroppa = null;\n                                            }\n                                        });*!/\n                                    }).catch(err => console.log(err));\n                            });\n                    }*/\n                  } else {\n                    vm.$message({\n                      duration: 1000,\n                      message: err.message,\n                      type: 'error'\n                    });\n                  }\n                });\n              }\n            });\n            upload.start(); //let fsFile = new FS.File(vm.thumbImgCroppa.getChosenFile());\n\n            /*vm.thumbImgCroppa.generateBlob((result) => {\n                let reader = new FileReader();\n                reader.onload = function (event) {\n                    let buffer = new Unit8Array(reader.result);\n                    Files.insert({data: buffer});\n                }\n                 reader.readAsArrayBuffer(result);\n            });*/\n\n            /*fsFile = new FS.File(vm.thumbImgCroppa.getChosenFile());\n            console.log(fsFile);\n            CategoryImage.insert(fsFile, function (err, result) {\n                if (err) {\n                    throw new Meteor.Error(err);\n                } else {\n                    let imageLoc = '/cfs/files/categoryImage' + result._id;\n                    console.log(imageLoc);\n                }\n            })*/\n\n            /*vm.thumbImgCroppa.generateBlob((blob) => {\n                let fd = new FormData();\n                fd.append('file', blob, \"fileName.jpg\");\n                console.log(fd);\n                CategoryImage.insert(fd, function (err, result) {\n                    if (err) {\n                        throw new Meteor.Error(err);\n                    } else {\n                        let imageLoc = '/cfs/files/categoryImage' + result._id;\n                        console.log(imageLoc);\n                    }\n                })\n              })*/\n\n            /*fsFile = new FS.File(myfi);\n            console.log(fsFile);\n            CategoryImage.insert(fsFile, function (err, result) {\n                if (err) {\n                    throw new Meteor.Error(err);\n                } else {\n                    let imageLoc = '/cfs/files/categoryImage' + result._id;\n                    console.log(imageLoc);\n                }\n            })*/\n          } else {\n            var posCategoryDoc = {\n              code: vm.posCategoryForm.code,\n              name: vm.posCategoryForm.name,\n              khName: vm.posCategoryForm.khName,\n              subCategoryOf: vm.posCategoryForm.subCategoryOf,\n              description: vm.posCategoryForm.description\n            };\n            Meteor.call(\"insertPosCategory\", posCategoryDoc, function (err, result) {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: \"Save Successfully!\",\n                  type: 'success'\n                });\n                vm.dialogAddPosCategory = false;\n                vm.parentPosCategoryOption();\n                vm.$refs[\"posCategoryFormAdd\"].resetFields();\n                /*if (vm.imgUrl) {\n                const storageRef = storagePath.fileImage(fileImage, Meteor.userId(), result, \"category\");\n                let uploadTask = storageRef\n                    .child(\"fileImage\")\n                    .putString(vm.imgUrl, \"data_url\");\n                uploadTask.on(\n                    \"state_changed\",\n                    function (snapshot) {\n                        // Observe state change events such as progress, pause, and resume\n                        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                        let progress =\n                            snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                        console.log(\"Upload is \" + progress + \"% done\");\n                        switch (snapshot.state) {\n                            case firebase.storageState.PAUSED: // or 'paused'\n                                console.log(\"Upload is paused\");\n                                break;\n                            case firebase.storageState.RUNNING: // or 'running'\n                                console.log(\"Upload is running \" + progress);\n                                break;\n                        }\n                    },\n                    function (error) {\n                        /!*setTimeout(() => {\n                            loading.close();\n                        }, 1000)*!/\n                    },\n                    function () {\n                        uploadTask.snapshot.ref.getDownloadURL()\n                            .then(url => {\n                                console.log(url);\n                                /!*Meteor.call('sch_updateStudentImageURlById', result, url, (err, re) => {\n                                    if (err) {\n                                        console.log(err.message);\n                                    } else {\n                                        vm.thumbImgCroppa = null;\n                                    }\n                                });*!/\n                            }).catch(err => console.log(err));\n                    });\n                }*/\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: err.message,\n                  type: 'error'\n                });\n              }\n            });\n          }\n        }\n      });\n    },\n    updatePosCategory: function () {\n      var vm = this;\n      this.$refs[\"posCategoryFormUpdate\"].validate(function (valid) {\n        if (valid) {\n          if (vm.thumbImgCroppa && vm.thumbImgCroppa.hasImage() && vm.imgUrl) {\n            var upload = Images.insert({\n              file: vm.imgUrl,\n              streams: 'dynamic',\n              chunkSize: 'dynamic'\n            }, false);\n            upload.on('start', function (error, result) {\n              if (error) {\n                console.log(error.message);\n              }\n            });\n            upload.on('end', function (error, fileObj) {\n              if (error) {\n                console.log(error.message);\n              } else {\n                var imageId = fileObj._id;\n                var imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n                var posCategoryDoc = {\n                  _id: vm.posCategoryForm._id,\n                  code: vm.posCategoryForm.code,\n                  name: vm.posCategoryForm.name,\n                  khName: vm.posCategoryForm.khName,\n                  subCategoryOf: vm.posCategoryForm.subCategoryOf,\n                  description: vm.posCategoryForm.description,\n                  imageId: imageId,\n                  imagePath: imagePath\n                };\n                Meteor.call(\"updatePosCategory\", posCategoryDoc, function (err, result) {\n                  if (!err) {\n                    vm.$message({\n                      duration: 1000,\n                      message: \"\\n                    Update\\n                    Successfully\\n                    !\",\n                      type: 'success'\n                    });\n                    vm.dialogUpdatePosCategory = false;\n                    vm.parentPosCategoryOption();\n                    vm.$refs[\"posCategoryFormUpdate\"].resetFields();\n                  } else {\n                    vm.$message({\n                      duration: 1000,\n                      message: \"\\n                    Update\\n                    Failed\\n                    !\",\n                      type: 'error'\n                    });\n                  }\n                });\n              }\n            });\n            upload.start();\n          } else {\n            var posCategoryDoc = {\n              _id: vm.posCategoryForm._id,\n              code: vm.posCategoryForm.code,\n              name: vm.posCategoryForm.name,\n              khName: vm.posCategoryForm.khName,\n              subCategoryOf: vm.posCategoryForm.subCategoryOf,\n              description: vm.posCategoryForm.description\n            };\n            Meteor.call(\"updatePosCategory\", posCategoryDoc, function (err, result) {\n              if (!err) {\n                vm.$message({\n                  duration: 1000,\n                  message: \"\\n                    Update\\n                    Successfully\\n                    !\",\n                  type: 'success'\n                });\n                vm.dialogUpdatePosCategory = false;\n                vm.parentPosCategoryOption();\n                vm.$refs[\"posCategoryFormUpdate\"].resetFields();\n              } else {\n                vm.$message({\n                  duration: 1000,\n                  message: \"\\n                    Update\\n                    Failed\\n                    !\",\n                  type: 'error'\n                });\n              }\n            });\n          }\n        }\n      });\n    },\n    removePosCategory: function (index, row, rows) {\n      var _this3 = this;\n\n      var vm = this;\n      this.$confirm('This will permanently delete the Item. Continue?', 'Warning', {\n        confirmButtonText: 'OK',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then(function () {\n        Meteor.call(\"removePosCategory\", row._id, row.imageId, function (err, result) {\n          if (!err) {\n            rows.splice(index, 1);\n            vm.$message({\n              message: \"\\n                    \\u179B\\u17BB\\u1794 \" + row.code + \" : \" + row.name + \" \\u1794\\u17B6\\u1793\\u1787\\u17C4\\u1782\\u1787\\u17D0\\u1799\",\n              type: 'success'\n            });\n            vm.parentPosCategoryOption();\n          } else {\n            vm.$message({\n              type: 'error',\n              message: 'Delete Failed'\n            });\n          }\n        });\n      }).catch(function () {\n        _this3.$message({\n          type: 'info',\n          message: 'Delete canceled'\n        });\n      });\n    },\n    findPosCategoryById: function (doc) {\n      var _this4 = this;\n\n      var vm = this;\n      vm.posCategoryForm = {};\n      Meteor.call(\"queryPosCategoryById\", doc.row._id, function (err, result) {\n        if (result) {\n          vm.posCategoryForm._id = result._id;\n\n          if (result.subCategoryOf == undefined || result.subCategoryOf == \"\") {\n            result.subCategoryOf = \"\";\n          }\n\n          vm.posCategoryForm = result;\n          vm.imgUrlUpdate = result.imagePath || \"\";\n\n          _this4.parentPosCategoryOption();\n        }\n      });\n    },\n    cancel: function () {\n      this.$message({\n        type: 'info',\n        message: 'Canceled'\n      });\n    },\n    resetForm: function () {\n      this.imgUrlUpdate = \"\";\n      this.thumbImgCroppa = null;\n      this.posCategoryForm._id = \"\";\n      this.parentPosCategoryOption();\n\n      if (this.$refs[\"posCategoryFormAdd\"]) {\n        this.$refs[\"posCategoryFormAdd\"].resetFields();\n      }\n\n      if (this.$refs[\"posCategoryFormUpdate\"]) {\n        this.$refs[\"posCategoryFormUpdate\"].resetFields();\n      }\n    },\n    generateThumbImgUrl: function () {\n      this.isloadingImage = true;\n      var url = this.thumbImgCroppa && this.thumbImgCroppa.getChosenFile();\n      this.isloadingImage = false; // let url = this.thumbImgCroppa && this.thumbImgCroppa.generateDataUrl();\n\n      if (!url) {\n        return;\n      }\n\n      this.imgUrl = url;\n    },\n    handleThumbImgCroppaZoom: function () {\n      this.generateThumbImgUrl();\n    },\n    handleThumbImgCroppaMove: function () {\n      this.generateThumbImgUrl();\n    },\n    handleThumbImgRemove: function () {\n      this.imgUrl = null;\n    },\n    handlePictureCardPreview: function (url) {\n      this.dialogImageUrl = url;\n      this.dialogVisible = true;\n    }\n  },\n  created: function () {\n    this.isSearching = true;\n    this.parentPosCategoryOption();\n    this.queryData();\n    Meteor.subscribe('Pos_CategoryReact');\n  },\n  computed: {\n    langConfig: function () {\n      var _this5 = this;\n\n      var data = compoLang.filter(function (config) {\n        return config.lang === _this5.langSession;\n      })[0]['category'];\n      return data;\n    }\n  }\n});","map":{"version":3,"sources":["/home/snr/Desktop/Project/activity/imports/vue/ui/posCategory.vue"],"names":["compoLang","module","link","v","Pos_CategoryReact","Images","Manage_Module","exportDefault","meteor","langSession","Session","get","disabledRemove","disabledUpdate","newRe","vm","find","fetch","queryData","searchData","skip","currentSize","isCoffee","ma","findOne","feature","indexOf","mounted","$jQuery","off","data","newLoading","dialogImageUrl","dialogVisible","posCategoryData","loading","isloadingImage","isSearching","currentPage","count","dialogAddPosCategory","dialogUpdatePosCategory","posCategoryForm","name","khName","code","subCategoryOf","description","_id","rules","required","message","trigger","subCategoryDataOption","thumbImgCroppa","imgUrl","imgUrlUpdate","watch","val","generateThumbImgUrl","methods","handleSizeChange","handleCurrentChange","_","debounce","limit","Meteor","call","q","filter","options","err","result","content","countPosCategory","parentPosCategoryOption","selector","savePosCategory","event","preventDefault","$refs","validate","valid","imageId","imagePath","hasImage","upload","insert","file","streams","chunkSize","on","error","console","log","fileObj","_downloadRoute","_collectionName","extensionWithDot","posCategoryDoc","$message","duration","type","resetFields","start","updatePosCategory","removePosCategory","index","row","rows","$confirm","confirmButtonText","cancelButtonText","then","splice","catch","findPosCategoryById","doc","undefined","cancel","resetForm","url","getChosenFile","handleThumbImgCroppaZoom","handleThumbImgCroppaMove","handleThumbImgRemove","handlePictureCardPreview","created","subscribe","computed","langConfig","config","lang"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport compoLang from '../../../both/i18n/lang/elem-label'\nimport {Pos_CategoryReact} from \"../../collection/posCategory\";\nimport {Images} from \"../../collection/fileImages\";\nimport {Manage_Module} from \"../../collection/manageModule\";\n\n\nexport default {\n    meteor: {\n        langSession() {\n            return Session.get('lang') || \"en\";\n        },\n        disabledRemove() {\n            return Session.get(\"canRemove\");\n        },\n        disabledUpdate() {\n            return Session.get(\"canUpdate\");\n        },\n        newRe() {\n            let vm = this;\n            Pos_CategoryReact.find({}).fetch();\n            vm.queryData(vm.searchData, vm.skip, vm.currentSize + vm.skip);\n        },\n        isCoffee() {\n            let ma = Manage_Module.findOne();\n            if (ma && ma.feature) {\n                return (ma.feature.indexOf(\"Coffee\") > -1 ? true : false);\n            }\n\n            return false;\n        }\n\n    },\n    mounted() {\n        this.$jQuery('body').off();\n\n    },\n    data() {\n        return {\n            newLoading: true,\n            dialogImageUrl: \"\",\n            dialogVisible: false,\n            posCategoryData: [],\n            loading: false,\n            isloadingImage: false,\n            searchData: '',\n            isSearching: false,\n            currentPage: 1,\n            currentSize: 10,\n            count: 0,\n            dialogAddPosCategory: false,\n            dialogUpdatePosCategory: false,\n\n            posCategoryForm: {\n                name: \"\",\n                khName: \"\",\n                code: \"\",\n                subCategoryOf: \"\",\n                description: \"\",\n                _id: \"\"\n            },\n            rules: {\n                name: [{required: true, message: 'Please input name', trigger: 'blur'}],\n                code: [{required: true, message: 'Please input code', trigger: 'blur'}],\n            },\n            // Options\n            subCategoryDataOption: [],\n            skip: 0,\n            thumbImgCroppa: null,\n            imgUrl: \"\",\n            imgUrlUpdate: \"\"\n        }\n    },\n    watch: {\n        currentSize(val) {\n            this.isSearching = true;\n            this.skip = (this.currentPage - 1) * val;\n            this.queryData(this.searchData, this.skip, val + this.skip);\n        },\n        currentPage(val) {\n            this.isSearching = true;\n            this.skip = (val - 1) * this.currentSize;\n            this.queryData(this.searchData, this.skip, this.currentSize + this.skip);\n        },\n        searchData(val) {\n            this.isSearching = true;\n            this.skip = (this.currentPage - 1) * this.currentSize;\n            this.queryData(val, this.skip, this.currentSize + this.skip);\n        },\n        'thumbImgCroppa.loading'(val) {\n            if (!val) {\n                this.generateThumbImgUrl();\n            }\n        }\n    },\n    methods: {\n        handleSizeChange(val) {\n            this.currentSize = val;\n        },\n        handleCurrentChange(val) {\n            this.currentPage = val;\n        },\n\n        queryData: _.debounce(function (val, skip, limit) {\n            this.newLoading = true;\n            Meteor.call('queryPosCategory', {\n                q: val,\n                filter: this.filter,\n                options: {skip: skip || 0, limit: limit || 10}\n            }, (err, result) => {\n                if (!err) {\n                    this.posCategoryData = result.content;\n                    this.count = result.countPosCategory;\n                }\n                this.isSearching = false;\n                this.newLoading = false;\n            });\n        }, 300),\n        parentPosCategoryOption() {\n            let selector = {};\n            Meteor.call('queryParentPosCategoryOption', selector, this.posCategoryForm._id, (err, result) => {\n                this.subCategoryDataOption = result;\n            })\n        },\n        savePosCategory(event) {\n            event.preventDefault();\n\n            let vm = this;\n            this.$refs[\"posCategoryFormAdd\"].validate((valid) => {\n                    if (valid) {\n                        let imageId = \"\";\n                        let imagePath = \"\";\n                        if (vm.thumbImgCroppa && vm.thumbImgCroppa.hasImage() && vm.imgUrl) {\n                            const upload = Images.insert({\n                                file: vm.imgUrl,\n                                streams: 'dynamic',\n                                chunkSize: 'dynamic'\n                            }, false);\n\n                            upload.on('start', function (error, result) {\n                                if (error) {\n                                    console.log(error.message);\n                                }\n                            })\n\n                            upload.on('end', function (error, fileObj) {\n                                if (error) {\n                                    console.log(error.message);\n                                } else {\n                                    imageId = fileObj._id;\n                                    imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n\n                                    let posCategoryDoc = {\n                                        code: vm.posCategoryForm.code,\n                                        name: vm.posCategoryForm.name,\n                                        khName: vm.posCategoryForm.khName,\n                                        subCategoryOf: vm.posCategoryForm.subCategoryOf,\n                                        description: vm.posCategoryForm.description,\n                                        imageId: imageId,\n                                        imagePath: imagePath,\n                                    };\n                                    Meteor.call(\"insertPosCategory\", posCategoryDoc, (err, result) => {\n                                        if (!err) {\n                                            vm.$message({\n                                                duration: 1000,\n                                                message: `Save Successfully!`,\n                                                type: 'success'\n                                            });\n                                            vm.dialogAddPosCategory = false;\n                                            vm.parentPosCategoryOption();\n                                            vm.$refs[\"posCategoryFormAdd\"].resetFields();\n\n                                            /*if (vm.imgUrl) {\n                                                const storageRef = storagePath.fileImage(fileImage, Meteor.userId(), result, \"category\");\n                                                let uploadTask = storageRef\n                                                    .child(\"fileImage\")\n                                                    .putString(vm.imgUrl, \"data_url\");\n                                                uploadTask.on(\n                                                    \"state_changed\",\n                                                    function (snapshot) {\n                                                        // Observe state change events such as progress, pause, and resume\n                                                        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                                                        let progress =\n                                                            snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                                                        console.log(\"Upload is \" + progress + \"% done\");\n                                                        switch (snapshot.state) {\n                                                            case firebase.storageState.PAUSED: // or 'paused'\n                                                                console.log(\"Upload is paused\");\n                                                                break;\n                                                            case firebase.storageState.RUNNING: // or 'running'\n                                                                console.log(\"Upload is running \" + progress);\n                                                                break;\n                                                        }\n                                                    },\n                                                    function (error) {\n                                                        /!*setTimeout(() => {\n                                                            loading.close();\n                                                        }, 1000)*!/\n                                                    },\n                                                    function () {\n                                                        uploadTask.snapshot.ref.getDownloadURL()\n                                                            .then(url => {\n                                                                console.log(url);\n                                                                /!*Meteor.call('sch_updateStudentImageURlById', result, url, (err, re) => {\n                                                                    if (err) {\n                                                                        console.log(err.message);\n                                                                    } else {\n                                                                        vm.thumbImgCroppa = null;\n                                                                    }\n                                                                });*!/\n                                                            }).catch(err => console.log(err));\n                                                    });\n                                            }*/\n\n\n                                        } else {\n                                            vm.$message({\n                                                duration: 1000,\n                                                message: err.message,\n                                                type: 'error'\n                                            });\n                                        }\n                                    })\n\n                                }\n                            })\n\n                            upload.start();\n\n                            //let fsFile = new FS.File(vm.thumbImgCroppa.getChosenFile());\n                            /*vm.thumbImgCroppa.generateBlob((result) => {\n                                let reader = new FileReader();\n                                reader.onload = function (event) {\n                                    let buffer = new Unit8Array(reader.result);\n                                    Files.insert({data: buffer});\n                                }\n\n                                reader.readAsArrayBuffer(result);\n                            });*/\n\n\n                            /*fsFile = new FS.File(vm.thumbImgCroppa.getChosenFile());\n                            console.log(fsFile);\n                            CategoryImage.insert(fsFile, function (err, result) {\n                                if (err) {\n                                    throw new Meteor.Error(err);\n                                } else {\n                                    let imageLoc = '/cfs/files/categoryImage' + result._id;\n                                    console.log(imageLoc);\n                                }\n                            })*/\n                            /*vm.thumbImgCroppa.generateBlob((blob) => {\n                                let fd = new FormData();\n                                fd.append('file', blob, \"fileName.jpg\");\n                                console.log(fd);\n                                CategoryImage.insert(fd, function (err, result) {\n                                    if (err) {\n                                        throw new Meteor.Error(err);\n                                    } else {\n                                        let imageLoc = '/cfs/files/categoryImage' + result._id;\n                                        console.log(imageLoc);\n                                    }\n                                })\n\n\n                            })*/\n\n                            /*fsFile = new FS.File(myfi);\n                            console.log(fsFile);\n                            CategoryImage.insert(fsFile, function (err, result) {\n                                if (err) {\n                                    throw new Meteor.Error(err);\n                                } else {\n                                    let imageLoc = '/cfs/files/categoryImage' + result._id;\n                                    console.log(imageLoc);\n                                }\n                            })*/\n\n\n                        } else {\n                            let posCategoryDoc = {\n                                code: vm.posCategoryForm.code,\n                                name: vm.posCategoryForm.name,\n                                khName: vm.posCategoryForm.khName,\n                                subCategoryOf: vm.posCategoryForm.subCategoryOf,\n                                description: vm.posCategoryForm.description\n                            };\n                            Meteor.call(\"insertPosCategory\", posCategoryDoc, (err, result) => {\n                                if (!err) {\n                                    vm.$message({\n                                        duration: 1000,\n                                        message: `Save Successfully!`,\n                                        type: 'success'\n                                    });\n                                    vm.dialogAddPosCategory = false;\n                                    vm.parentPosCategoryOption();\n                                    vm.$refs[\"posCategoryFormAdd\"].resetFields();\n\n\n                                    /*if (vm.imgUrl) {\n                                    const storageRef = storagePath.fileImage(fileImage, Meteor.userId(), result, \"category\");\n                                    let uploadTask = storageRef\n                                        .child(\"fileImage\")\n                                        .putString(vm.imgUrl, \"data_url\");\n                                    uploadTask.on(\n                                        \"state_changed\",\n                                        function (snapshot) {\n                                            // Observe state change events such as progress, pause, and resume\n                                            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                                            let progress =\n                                                snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                                            console.log(\"Upload is \" + progress + \"% done\");\n                                            switch (snapshot.state) {\n                                                case firebase.storageState.PAUSED: // or 'paused'\n                                                    console.log(\"Upload is paused\");\n                                                    break;\n                                                case firebase.storageState.RUNNING: // or 'running'\n                                                    console.log(\"Upload is running \" + progress);\n                                                    break;\n                                            }\n                                        },\n                                        function (error) {\n                                            /!*setTimeout(() => {\n                                                loading.close();\n                                            }, 1000)*!/\n                                        },\n                                        function () {\n                                            uploadTask.snapshot.ref.getDownloadURL()\n                                                .then(url => {\n                                                    console.log(url);\n                                                    /!*Meteor.call('sch_updateStudentImageURlById', result, url, (err, re) => {\n                                                        if (err) {\n                                                            console.log(err.message);\n                                                        } else {\n                                                            vm.thumbImgCroppa = null;\n                                                        }\n                                                    });*!/\n                                                }).catch(err => console.log(err));\n                                        });\n                                }*/\n\n\n                                } else {\n                                    vm.$message({\n                                        duration: 1000,\n                                        message: err.message,\n                                        type: 'error'\n                                    });\n                                }\n                            })\n                        }\n                    }\n                }\n            )\n\n        },\n        updatePosCategory() {\n            let vm = this;\n            this.$refs[\"posCategoryFormUpdate\"].validate((valid) => {\n                if (valid) {\n                    if (vm.thumbImgCroppa && vm.thumbImgCroppa.hasImage() && vm.imgUrl) {\n                        const upload = Images.insert({\n                            file: vm.imgUrl,\n                            streams: 'dynamic',\n                            chunkSize: 'dynamic'\n                        }, false);\n\n                        upload.on('start', function (error, result) {\n                            if (error) {\n                                console.log(error.message);\n                            }\n                        })\n\n                        upload.on('end', function (error, fileObj) {\n                            if (error) {\n                                console.log(error.message);\n                            } else {\n                                let imageId = fileObj._id;\n                                let imagePath = fileObj._downloadRoute + \"/\" + fileObj._collectionName + \"/\" + fileObj._id + \"/original/\" + fileObj._id + fileObj.extensionWithDot;\n\n                                let posCategoryDoc = {\n                                    _id: vm.posCategoryForm._id,\n                                    code: vm.posCategoryForm.code,\n                                    name: vm.posCategoryForm.name,\n                                    khName: vm.posCategoryForm.khName,\n                                    subCategoryOf: vm.posCategoryForm.subCategoryOf,\n                                    description: vm.posCategoryForm.description,\n                                    imageId: imageId,\n                                    imagePath: imagePath\n                                };\n\n                                Meteor.call(\"updatePosCategory\", posCategoryDoc, (err, result) => {\n                                    if (!err) {\n                                        vm.$message({\n                                            duration: 1000,\n                                            message: `\n                    Update\n                    Successfully\n                    !`,\n                                            type: 'success'\n                                        });\n                                        vm.dialogUpdatePosCategory = false;\n                                        vm.parentPosCategoryOption();\n                                        vm.$refs[\"posCategoryFormUpdate\"].resetFields();\n                                    } else {\n                                        vm.$message({\n                                            duration: 1000,\n                                            message: `\n                    Update\n                    Failed\n                    !`,\n                                            type: 'error'\n                                        });\n                                    }\n                                })\n\n                            }\n                        })\n\n                        upload.start();\n\n                    } else {\n\n\n                        let posCategoryDoc = {\n                            _id: vm.posCategoryForm._id,\n                            code: vm.posCategoryForm.code,\n                            name: vm.posCategoryForm.name,\n                            khName: vm.posCategoryForm.khName,\n                            subCategoryOf: vm.posCategoryForm.subCategoryOf,\n                            description: vm.posCategoryForm.description,\n                        };\n\n                        Meteor.call(\"updatePosCategory\", posCategoryDoc, (err, result) => {\n                            if (!err) {\n                                vm.$message({\n                                    duration: 1000,\n                                    message: `\n                    Update\n                    Successfully\n                    !`,\n                                    type: 'success'\n                                });\n                                vm.dialogUpdatePosCategory = false;\n                                vm.parentPosCategoryOption();\n                                vm.$refs[\"posCategoryFormUpdate\"].resetFields();\n                            } else {\n                                vm.$message({\n                                    duration: 1000,\n                                    message: `\n                    Update\n                    Failed\n                    !`,\n                                    type: 'error'\n                                });\n                            }\n                        })\n                    }\n                }\n            })\n\n        },\n        removePosCategory(index, row, rows) {\n            let vm = this;\n            this.$confirm('This will permanently delete the Item. Continue?', 'Warning', {\n                confirmButtonText: 'OK',\n                cancelButtonText: 'Cancel',\n                type: 'warning'\n            }).then(() => {\n                Meteor.call(\"removePosCategory\", row._id, row.imageId, (err, result) => {\n                    if (!err) {\n                        rows.splice(index, 1);\n\n                        vm.$message({\n                            message: `\n                    លុប ${row.code} : ${row.name} បានជោគជ័យ`,\n                            type: 'success'\n                        });\n\n                        vm.parentPosCategoryOption();\n                    } else {\n                        vm.$message({\n                            type: 'error',\n                            message: 'Delete Failed'\n                        });\n                    }\n\n                })\n\n            }).catch(() => {\n                this.$message({\n                    type: 'info',\n                    message: 'Delete canceled'\n                });\n            });\n\n\n        },\n        findPosCategoryById(doc) {\n            let vm = this;\n            vm.posCategoryForm = {};\n\n            Meteor.call(\"queryPosCategoryById\", doc.row._id, (err, result) => {\n                if (result) {\n                    vm.posCategoryForm._id = result._id;\n                    if (result.subCategoryOf == undefined || result.subCategoryOf == \"\") {\n                        result.subCategoryOf = \"\";\n                    }\n                    vm.posCategoryForm = result;\n                    vm.imgUrlUpdate = result.imagePath || \"\";\n                    this.parentPosCategoryOption();\n                }\n            })\n        },\n        cancel() {\n            this.$message({\n                type: 'info',\n                message: 'Canceled'\n            });\n        },\n        resetForm() {\n            this.imgUrlUpdate = \"\";\n            this.thumbImgCroppa = null;\n\n            this.posCategoryForm._id = \"\";\n            this.parentPosCategoryOption();\n            if (this.$refs[\"posCategoryFormAdd\"]) {\n                this.$refs[\"posCategoryFormAdd\"].resetFields();\n            }\n\n            if (this.$refs[\"posCategoryFormUpdate\"]) {\n                this.$refs[\"posCategoryFormUpdate\"].resetFields();\n            }\n\n        },\n        generateThumbImgUrl: function () {\n            this.isloadingImage = true;\n            let url = this.thumbImgCroppa && this.thumbImgCroppa.getChosenFile();\n            this.isloadingImage = false;\n            // let url = this.thumbImgCroppa && this.thumbImgCroppa.generateDataUrl();\n            if (!url) {\n                return\n            }\n            this.imgUrl = url\n        },\n        handleThumbImgCroppaZoom() {\n            this.generateThumbImgUrl();\n        },\n        handleThumbImgCroppaMove() {\n            this.generateThumbImgUrl();\n        },\n        handleThumbImgRemove() {\n            this.imgUrl = null\n        },\n        handlePictureCardPreview(url) {\n            this.dialogImageUrl = url;\n            this.dialogVisible = true;\n        }\n    },\n    created() {\n        this.isSearching = true;\n        this.parentPosCategoryOption();\n        this.queryData();\n        Meteor.subscribe('Pos_CategoryReact');\n\n    },\n    computed: {\n        langConfig() {\n            let data = compoLang.filter(config => config.lang === this.langSession)[0]['category'];\n            return data;\n        }\n    }\n}\n"]},"sourceType":"script","hash":"bec5a65e0c3fb626d9a28fb29245447200a4c7f4"}
